import sys
from itertools import groupby

file = open(sys.argv[1], 'r')
lines = file.readlines()

def parse_int(line):
    return int(line, 0)

lines = list(map(parse_int, lines))

addrs = []
cnts = []
sample = 1000
for i in range(len(lines)-1):
    val = lines[i]
    if not (val in addrs):
        addrs.append(val)
        cnts.append(0)
    j = addrs.index(val)
    cnts[j] += 1

j = -1
for i in range(len(cnts)):
    if cnts[i] == 7: # initCurve has 6 instuctions + the return, so the page is loaded 7 times
        j = i
        break

if j == -1:
    raise ValueError("initCurve has not been found")

initCurve_addr = addrs[j]
pointdouble_addr = -1
pointaddition_addr = -1
doubleandadd_addr = -1

for i in range(len(cnts)):
    if addrs[i] - initCurve_addr == 0x2000:
        pointdouble_addr = addrs[i]
    elif addrs[i] - initCurve_addr == 0x3000:
        pointaddition_addr = addrs[i]
    elif addrs[i] - initCurve_addr == 0x4000:
        doubleandadd_addr = addrs[i]

if pointdouble_addr == -1:
    raise ValueError("pointdouble has not been found")

if pointaddition_addr == -1:
    raise ValueError("pointaddition has not been found")

if doubleandadd_addr == -1:
    raise ValueError("doubleandadd has not been found")

def filter_interesting_ops(line):
    return line == doubleandadd_addr or line == pointdouble_addr or line == pointaddition_addr

lines = list(filter(filter_interesting_ops, lines))
lines = [i[0] for i in groupby(lines)]

val = 1

for i in range(len(lines)):
    page = lines[i]

    if page == pointaddition_addr:
        val += 1
    elif page == pointdouble_addr:
        val *= 2

print(hex(val)[2:])
